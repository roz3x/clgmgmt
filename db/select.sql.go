// Code generated by sqlc. DO NOT EDIT.
// source: select.sql

package db

import (
	"context"
)

const selectDepartments = `-- name: SelectDepartments :many
select id, name, hod_id from departments
`

func (q *Queries) SelectDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, selectDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(&i.ID, &i.Name, &i.HodID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const seleteEnrollDetails = `-- name: SeleteEnrollDetails :many
select students.name , enroll.course_id , courses.instructor_id from  
enroll left join students on enroll.student_id = students.id 
left join courses on courses.id = enroll.course_id
`

type SeleteEnrollDetailsRow struct {
	Name         string `json:"name"`
	CourseID     int32  `json:"course_id"`
	InstructorID int32  `json:"instructor_id"`
}

func (q *Queries) SeleteEnrollDetails(ctx context.Context) ([]SeleteEnrollDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, seleteEnrollDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SeleteEnrollDetailsRow
	for rows.Next() {
		var i SeleteEnrollDetailsRow
		if err := rows.Scan(&i.Name, &i.CourseID, &i.InstructorID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
