// Code generated by sqlc. DO NOT EDIT.
// source: college.sql

package db

import (
	"context"
)

const insertCourse = `-- name: InsertCourse :one
insert into courses (
  name , department_id , instructor_id
) values (
  $1 , $2 , $3
) returning id, name, department_id, instructor_id
`

type InsertCourseParams struct {
	Name         string `json:"name"`
	DepartmentID int32  `json:"department_id"`
	InstructorID int32  `json:"instructor_id"`
}

func (q *Queries) InsertCourse(ctx context.Context, arg InsertCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, insertCourse, arg.Name, arg.DepartmentID, arg.InstructorID)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DepartmentID,
		&i.InstructorID,
	)
	return i, err
}

const insertDepartment = `-- name: InsertDepartment :one

insert into departments (
  name  , hod_id
) values  (
  $1 , $2
) returning id, name, hod_id
`

type InsertDepartmentParams struct {
	Name  string `json:"name"`
	HodID int32  `json:"hod_id"`
}

func (q *Queries) InsertDepartment(ctx context.Context, arg InsertDepartmentParams) (Department, error) {
	row := q.db.QueryRowContext(ctx, insertDepartment, arg.Name, arg.HodID)
	var i Department
	err := row.Scan(&i.ID, &i.Name, &i.HodID)
	return i, err
}

const insertEnroll = `-- name: InsertEnroll :one
insert into enroll (
  student_id , course_id
)  values (
  $1 , $2
) returning student_id, course_id
`

type InsertEnrollParams struct {
	StudentID int32 `json:"student_id"`
	CourseID  int32 `json:"course_id"`
}

func (q *Queries) InsertEnroll(ctx context.Context, arg InsertEnrollParams) (Enroll, error) {
	row := q.db.QueryRowContext(ctx, insertEnroll, arg.StudentID, arg.CourseID)
	var i Enroll
	err := row.Scan(&i.StudentID, &i.CourseID)
	return i, err
}

const insertInstructor = `-- name: InsertInstructor :one
insert into instructors (
  name  
) values (
  $1
) returning id, name
`

func (q *Queries) InsertInstructor(ctx context.Context, name string) (Instructor, error) {
	row := q.db.QueryRowContext(ctx, insertInstructor, name)
	var i Instructor
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertStudent = `-- name: InsertStudent :one
insert into students (
  name
) values (
  $1
) returning id, name
`

func (q *Queries) InsertStudent(ctx context.Context, name string) (Student, error) {
	row := q.db.QueryRowContext(ctx, insertStudent, name)
	var i Student
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
